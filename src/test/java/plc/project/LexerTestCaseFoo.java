/*

<==== Test Case Foo ====>


The source or "input" for the example:


LET i = -1;
LET inc = 2;
DEF foo() DO
    WHILE i <= 1 DO
        IF i > 0 DO
            print(\"bar\");
        END
        i = i + inc;
    END
END

<==== Character Index Positions ====>


for each line of our source in this example,
we label each index position
note:
 (a) the last char on each line is a newline
 (b) the index skip that occurs for escapes

0         1
012345678901                  =>   0  -to-   11
LET i = -1;

        2
2345678901234                 =>  12  -to-   24
LET inc = 2;

     3
5678901234567                 =>  25  -to-   37
DEF foo() DO

  4         5
89012345678901234567          =>  38  -to-   57
    WHILE i <= 1 DO

  6         7
89012345678901234567          =>  58  -to-   77
        IF i > 0 DO

                        1
  8         9           0
890123456789012345 6789 0123  =>  78  -to-  103
            print(\"bar\");

      1
      1
456789012345                  => 104  -to-  115
        END

    1         1
    2         3
678901234567890123456         => 116  -to-  136
        i = i + inc;

   1
   4
78901234                      => 137  -to-  144
    END
567                           => 145  -to-  147
END


// source String represenation of the test case
String source = new String("LET i = -1;\nLET inc = 2;\nDEF foo() DO\n    WHILE i <= 1 DO\n        IF i > 0 DO\n            print(\"bar\");\n        END\n        i = i + inc;\n    END\nEND");


<==== Tokens Generated by the Lexer ====>

Note, there are two formats that follow
 (1) Token list generated by using System.out.println(tokens);
     Generating the list of tokens using the toString representaion
     of each token.
     
 (2) The "Arrays.list(" representation you could use to form a Unit test.

<==== (1) ====>

[IDENTIFIER=LET@0, IDENTIFIER=i@4, OPERATOR==@6, INTEGER=-1@8, OPERATOR=;@10, IDENTIFIER=LET@12, IDENTIFIER=inc@16, OPERATOR==@20, INTEGER=2@22, OPERATOR=;@23, IDENTIFIER=DEF@25, IDENTIFIER=foo@29, OPERATOR=(@32, OPERATOR=)@33, IDENTIFIER=DO@35, IDENTIFIER=WHILE@42, IDENTIFIER=i@48, OPERATOR=<=@50, INTEGER=1@53, IDENTIFIER=DO@55, IDENTIFIER=IF@66, IDENTIFIER=i@69, OPERATOR=>@71, INTEGER=0@73, IDENTIFIER=DO@75, IDENTIFIER=print@90, OPERATOR=(@95, STRING="bar"@96, OPERATOR=)@101, OPERATOR=;@102, IDENTIFIER=END@112, IDENTIFIER=i@124, OPERATOR==@126, IDENTIFIER=i@128, OPERATOR=+@130, IDENTIFIER=inc@132, OPERATOR=;@135, IDENTIFIER=END@141, IDENTIFIER=END@145]

<==== (2) ====>

*/
//package plc.project;
//List<Token> input = Arrays.asList(
//
//    //LET i = -1;
//    new Token(Token.Type.IDENTIFIER, "LET", 0),
//    new Token(Token.Type.IDENTIFIER, "i", 4),
//    new Token(Token.Type.OPERATOR, "=", 6),
//    new Token(Token.Type.INTEGER, "-1", 8),
//    new Token(Token.Type.OPERATOR, ";", 10),
//
//    //LET inc = 2;
//    new Token(Token.Type.IDENTIFIER, "LET", 12),
//    new Token(Token.Type.IDENTIFIER, "inc", 16),
//    new Token(Token.Type.OPERATOR, "=", 20),
//    new Token(Token.Type.INTEGER, "2", 22),
//    new Token(Token.Type.OPERATOR, ";", 23),
//
//    //DEF foo() DO
//    new Token(Token.Type.IDENTIFIER, "DEF", 25),
//    new Token(Token.Type.IDENTIFIER, "foo", 29),
//    new Token(Token.Type.OPERATOR, "(", 32),
//    new Token(Token.Type.OPERATOR, ")", 33),
//    new Token(Token.Type.IDENTIFIER, "DO", 35),
//
//    //    WHILE i <= 1 DO
//    new Token(Token.Type.IDENTIFIER, "WHILE", 42),
//    new Token(Token.Type.IDENTIFIER, "i", 48),
//    new Token(Token.Type.OPERATOR, "<=", 50),
//    new Token(Token.Type.INTEGER, "1", 53),
//    new Token(Token.Type.IDENTIFIER, "DO", 55),
//
//    //        IF i > 0 DO
//    new Token(Token.Type.IDENTIFIER, "IF", 66),
//    new Token(Token.Type.IDENTIFIER, "i", 69),
//    new Token(Token.Type.OPERATOR, ">", 71),
//    new Token(Token.Type.INTEGER, "0", 73),
//    new Token(Token.Type.IDENTIFIER, "DO", 75),
//
//    //            print(\"bar\");
//    new Token(Token.Type.IDENTIFIER, "print", 90),
//    new Token(Token.Type.OPERATOR, "(", 95),
//    new Token(Token.Type.STRING, "\"bar\"", 96),
//    new Token(Token.Type.OPERATOR, ")", 101),
//    new Token(Token.Type.OPERATOR, ";", 102),
//
//    //        END
//    new Token(Token.Type.IDENTIFIER, "END", 112)
//
//    //        i = i + inc;
//    new Token(Token.Type.IDENTIFIER, "i",124),
//    new Token(Token.Type.OPERATOR, "=", 126),
//    new Token(Token.Type.IDENTIFIER, "i", 128),
//    new Token(Token.Type.OPERATOR, "+", 130),
//    new Token(Token.Type.IDENTIFIER, "inc", 132),
//    new Token(Token.Type.OPERATOR, ";", 135),
//
//    //    END
//    new Token(Token.Type.IDENTIFIER, "END", 141)
//
//    //END
//    new Token(Token.Type.IDENTIFIER, "END", 145)
//);
